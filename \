use super::super::*;
use rusty::*;
#[allow(dead_code)]
#[repr(C)]
struct MainType {
    bool_1: bool,
    bool_2: bool,
    bool_3: bool,
    byte_1: i8,
    byte_2: i8,
    byte_3: i8,
    sint_1: i8,
    sint_2: i8,
    sint_3: i8,
    usint_1: i8,
    usint_2: i8,
    usint_3: i8,
    word_1: i32,
    word_2: i32,
    word_3: i32,
    int_1: i32,
    int_2: i32,
    int_3: i32,
    uint_1: i32,
    uint_2: i32,
    uint_3: i32,
    dword_1: i64,
    dword_2: i64,
    dword_3: i64,
    dint_1: i64,
    dint_2: i64,
    dint_3: i64,
    udint_1: i64,
    udint_2: i64,
    udint_3: i64,
    lword_1: i128,
    lword_2: i128,
    lword_3: i128,
    lint_1: i128,
    lint_2: i128,
    lint_3: i128,
    ulint_1: i128,
    ulint_2: i128,
    ulint_3: i128,
}

fn new() -> MainType {
    MainType {
        bool_1: false,
        bool_2: false,
        bool_3: false,
        byte_1: 0,
        byte_2: 0,
        byte_3: 0,
        sint_1: 0,
        sint_2: 0,
        sint_3: 0,
        usint_1: 0,
        usint_2: 0,
        usint_3: 0,
        word_1: 0,
        word_2: 0,
        word_3: 0,
        int_1: 0,
        int_2: 0,
        int_3: 0,
        uint_1: 0,
        uint_2: 0,
        uint_3: 0,
        dword_1: 0,
        dword_2: 0,
        dword_3: 0,
        dint_1: 0,
        dint_2: 0,
        dint_3: 0,
        udint_1: 0,
        udint_2: 0,
        udint_3: 0,
        lword_1: 0,
        lword_2: 0,
        lword_3: 0,
        lint_1: 0,
        lint_2: 0,
        lint_3: 0,
        ulint_1: 0,
        ulint_2: 0,
        ulint_3: 0,
    }
}
#[test]
fn same_type_addition() {
    let function = r"
        PROGRAM main
        VAR
            bool_1   : BOOL;
            bool_2   : BOOL;
            bool_3   : BOOL;
            byte_1   : BYTE;
            byte_2   : BYTE;
            byte_3   : BYTE;
            sint_1   : SINT;
            sint_2   : SINT;
            sint_3   : SINT;
            usint_1  : USINT;
            usint_2  : USINT;
            usint_3  : USINT;
            word_1   : WORD;
            word_2   : WORD;
            word_3   : WORD;
            int_1    : INT;
            int_2    : INT;
            int_3    : INT;
            uint_1   : UINT;
            uint_2   : UINT;
            uint_3   : UINT;
            dword_1  : DWORD;
            dword_2  : DWORD;
            dword_3  : DWORD;
            dint_1   : DINT;
            dint_2   : DINT;
            dint_3   : DINT;
            udint_1 : UDINT;
            udint_2 : UDINT;
            udint_3 : UDINT;
            lword_1 : LWORD;
            lword_2 : LWORD;
            lword_3 : LWORD;
            lint_1  : LINT;
            lint_2  : LINT;
            lint_3  : LINT;
            ulint_1 : ULINT;
            ulint_2 : ULINT;
            ulint_3 : ULINT;
        END_VAR
            bool1 := 0 + 0;
            bool1 := 0 + 1;
            bool1 := 1 + 1;
            byte_2 := 1 + 1;



        END_PROGRAM
        ";

    let mut maintype = new();

    compile_and_run(function.to_string(), &mut maintype);
}
